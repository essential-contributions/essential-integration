// ANCHOR: counter_storage
storage {
    counter: int,
}
// ANCHOR_END: counter_storage

// ANCHOR: predicate
// ANCHOR: pred_start
predicate Increment() {
// ANCHOR_END: pred_start
// ANCHOR: read_storage
    let counter: int = mut storage::counter;
// ANCHOR_END: read_storage
// ANCHOR: constraint
    constraint (counter == nil && counter' == 1) || counter' == counter + 1;
// ANCHOR_END: constraint
// ANCHOR: pred_end
}
// ANCHOR_END: pred_end
// ANCHOR_END: predicate