use std::lib::PredicateAddress;
use std::lib::@mut_keys;

storage {
    token: int,
}

interface Nft {
    storage {
        owners: (int => b256),
        nonce: (b256 => int),
    }

    predicate TransferI {
        // The address that the token is being sent key
        pub var key: b256;
        // The token being transfered 
        pub var to: b256;
        // The instance of the transfer predicate
        pub var token: int;
    }
}

predicate Init {
    var contract: b256;
    interface NftInstance = Nft(contract);
    
    state current_token = storage::token;
    state token_owner = NftInstance::storage::owners[current_token'];

    constraint current_token == nil && token_owner' != nil;

    @mut_keys(1);
    
    // TODO: Get hash of swap so that `token_owner'` can be constraint to the predicate address of swap.
}

predicate Swap {
    pub var nft: PredicateAddress;

    interface NftInstance = Nft(nft.contract);
    predicate I = NftInstance::TransferI(nft.addr);
    
    state current_token = storage::token;
    state current_token_owner = NftInstance::storage::owners[current_token];
    state new_token_owner = NftInstance::storage::owners[current_token'];
    
    constraint new_token_owner' == std::lib::@hash_this_addr();
    constraint new_token_owner' == current_token_owner;
    constraint current_token_owner' == new_token_owner;

    constraint current_token_owner == I::key;
    constraint new_token_owner == I::to;
    constraint current_token == I::token;
    
    @mut_keys(1);
}
