
interface AuthI {
    intent Auth {
        pub var key: b256;
        pub var token: b256;
        pub var to: b256;
        pub var set: b256;
        pub var intent_addr: b256;
        pub var path: int;
    }
}

intent Auth {
    pub var key: b256;
    pub var token: b256;
    pub var to: b256;
    pub var set: b256;
    pub var intent_addr: b256;
    pub var path: int;



    var auth_addr: lib::IntentAddress;

    interface AuthInstance = AuthI(auth_addr.set);
    intent A = AuthInstance::Auth(auth_addr.intent_addr);


    constraint @key_auth(auth_addr) || key == __sha256(auth_addr);

    
    lib::@forward_data({ key: key, token: token, to: to, set: set, intent_addr: intent_addr, path: path }; A);
}

// Hard coded key intent address
macro @key_auth($auth_addr) {
    @key_auth_check($auth_addr; { 
        set: 0x94473FBA5473ACACC73161AB7F19C601B6235AF8FDA6D2261BBF9CED83A16059,
        intent_addr: 0xBBCFDA51E579C128CB2A6C9BA90F31CB6AC0F01327549105E7D2004091BEAACA,
    })
}

// Check if the authorized intent is the key intent.
macro @key_auth_check($auth_addr, $key_addr) {
    (auth_addr.set == $key_addr.set && auth_addr.intent_addr == $key_addr.intent_addr)
}
