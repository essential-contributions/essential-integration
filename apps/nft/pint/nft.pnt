storage {
    owners: (int => b256),
}

interface Auth {
    intent Intent {
        pub var key: b256;
        pub var to: b256;
        pub var token: int;
        pub var set: b256;
        pub var intent_addr: b256;
        pub var path: int;
    }
}

intent Mint {
    var token: int;
    var new_owner: b256;

    state owner = storage::owners[token];

    constraint owner == nil;

    constraint owner' == new_owner;
    
    std::lib::@constrain_keys(token);
}

intent Transfer {
    var auth_addr: std::lib::IntentAddress;
    
    interface AuthI = Auth(auth_addr.set);
    intent A = AuthI::Intent(auth_addr.intent_addr);

    state owner = storage::owners[A::token];

    constraint owner == A::key;
    constraint owner' == A::to;

    std::lib::@constrain_keys(A::token);
    std::auth::@authenticate(auth_addr; A; allowed::signed::@intents);
}
