storage {
    owners: (int => b256),
}

interface Auth {
    predicate Predicate {
        pub var key: b256;
        pub var to: b256;
        pub var token: int;
        pub var contract:b256;
        pub var predicate_addr: b256;
        pub var path: int;
    }
}

predicate Mint {
    var token: int;
    var new_owner: b256;

    state owner = storage::owners[token];

    constraint owner == nil;

    constraint owner' == new_owner;
    
    std::lib::@constrain_keys(token);
}

predicate Transfer {
    var auth_addr: std::lib::PredicateAddress;
    
    interface AuthI = Auth(auth_addr.set);
    predicate A = AuthI::Predicate(auth_addr.predicate_addr);

    state owner = storage::owners[A::token];

    constraint owner == A::key;
    constraint owner' == A::to;

    std::lib::@constrain_keys(A::token);
    std::auth::@authenticate(auth_addr; A; allowed::signed::@predicates);
}
