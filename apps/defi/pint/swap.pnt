
interface Token {
    storage {
        balances: (b256 => int),
        nonce: (b256 => int),
        token_name: b256,
        token_symbol: b256,
        decimals: int,
    }
}

intent Swap {
    pub var key: b256;
    var account_b: b256;
    
    var token_a: b256;
    var token_b: b256;

    var amount_a_max: int;
    var amount_b_min: int;
    
    var sig: std::lib::Secp256k1Signature;
    var public_key: std::lib::Secp256k1PublicKey;
    
    interface TokenA = Token(token_a);
    interface TokenB = Token(token_b);

    state balance_a = TokenA::storage::balances[key];
    state balance_b = TokenB::storage::balances[account_b];
    
    state nonce = TokenA::storage::nonce[key];

    constraint std::lib::@delta(balance_a) >= 0 - amount_a_max;
    constraint std::lib::@delta(balance_b) >= amount_b_min;

    std::lib::@recover({key, account_b, token_a, token_b, amount_a_max, amount_b_min, nonce'}; sig; public_key);
    
    constraint __sha256(public_key) == key;
}