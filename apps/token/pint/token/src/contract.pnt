use std::lib::PredicateAddress;
use std::lib::@delta;
use std::lib::@safe_increment;
use std::lib::@init_once;
use std::lib::@init_delta;
use std::lib::@mut_keys;
use std::auth::@verify_key;
use std::lib::Secp256k1Signature;
use std::auth::@check_if_predicate_owns;

storage {
    // The balances of accounts
    balances: (b256 => int),
    // The nonce for each account
    nonce: (b256 => int),
    // The name of the token hashed
    token_name: b256,
    // The symbol of the token hashed
    token_symbol: b256,
    // The decimals of the token
    decimals: int,
}

union BurnAuth = Signed(Secp256k1Signature) | Predicate(PredicateAddress);

predicate Burn {
    // These are public so that the authorization can check them.

    // The address of the account that is burning tokens.
    pub var key: b256;
    // The amount being burnt.
    pub var amount: int;

    // The authorization for the burn.
    var auth: BurnAuth;
    
    // Read the balance and nonce from storage.
    state balance = mut storage::balances[key];
    state nonce = mut storage::nonce[key];

    // Don't allow empty burns.
    constraint amount > 0;

    // The change in balance should be the negative of the amount.
    constraint @delta(balance) == 0 - amount;

    // Make sure the balance after the burn is not negative.
    constraint balance' >= 0;

    // Increment the nonce.
    constraint @safe_increment(nonce);
    
    // Check the authorization.
    constraint match auth {
        BurnAuth::Signed(sig) => @verify_key({key, amount, nonce'}; sig; key),
        BurnAuth::Predicate(addr) => @check_if_predicate_owns(addr; key),
    };
}

union MintAuth = Signed(Secp256k1Signature) | Predicate(PredicateAddress);

predicate Mint {
    // These are public so that the authorization can check them.

    // The key that is being minted to.
    // Note this is hard coded so that only one entity can mint.
    pub var key: b256;

    // The amount being minted.
    // This is also the total supply.
    pub var amount: int;
    // The number of decimals for the token.
    pub var decimals: int;
    
    // The authorization for the mint.
    var auth: MintAuth;

    // Read all the state that is being initialized.
    state balance = mut storage::balances[key];
    state nonce = mut storage::nonce[key];
    state token_name = mut storage::token_name;
    state token_symbol = mut storage::token_symbol;
    state token_decimals = mut storage::decimals;

    // The only authorized minting address.
    // Note that changing this also creates a new token.
    constraint key == config::MINT_KEY;
    
    // Initialize all state.
    // This enforces the pre state must be null 
    // and the post state must be set to the provided value.
    constraint @init_once(balance; amount);
    constraint @init_once(token_name; config::NAME);
    constraint @init_once(token_symbol; config::SYMBOL);
    constraint @init_once(token_decimals; decimals);
    constraint @init_once(nonce; 1);

    // Check the authorization.
    constraint match auth {
        MintAuth::Signed(sig) => @verify_key({key, amount, decimals, nonce'}; sig; key),
        MintAuth::Predicate(addr) => @check_if_predicate_owns(addr; key),
    };
}

/// The signature mode for the transfer authorization.
///
/// For instance, can use `KeyAmount` to pay the solver, whose address is unknown to the user at sign-time.
union TransferSignedMode = All | Key | KeyTo | KeyAmount;

/// The signed authorization for the transfer.
type TransferSignedAuth = { sig: Secp256k1Signature, mode: TransferSignedMode };

/// The authorization mode for the transfer.
union TransferAuthMode = Signed(TransferSignedAuth) | Predicate(PredicateAddress);

/// The extra constraints for the transfer.
type Extra = { addr: PredicateAddress, path: int };

/// Optional extra constraints for the transfer.
union ExtraConstraints = Extra(Extra) | None;

/// The authorization for the transfer.
type TransferAuth = { mode: TransferAuthMode, extra: ExtraConstraints };

predicate Transfer {
    // These are public so that the authorization can check them.

    // The address that the amount is being sent from.
    pub var key: b256;
    // The address that the amount is being sent to.
    pub var to: b256;
    // The amount being transfered.
    pub var amount: int;

    var auth: TransferAuth;

    // Read the balances and nonce from storage.
    state sender_balance = mut storage::balances[key];
    state receiver_balance = mut storage::balances[to];
    state nonce = mut storage::nonce[key];

    // Don't allow empty transfers.
    constraint amount > 0;

    // Make sure the sender has enough balance.
    constraint sender_balance' >= 0;

    // The change in the sender balance should be the negative of the amount.
    constraint @delta(sender_balance) == 0 - amount;

    // The change in the receiver balance should be the positive of the amount.
    // This also handles the case where the receiver's balance is nil.
    constraint @init_delta(receiver_balance; amount);

    // Increment the nonce.
    constraint @safe_increment(nonce);
    
    // Check the authorization predicate.
    constraint match auth.mode {
        TransferAuthMode::Signed(auth) => match auth.mode {
            TransferSignedMode::All => @verify_key({key, to, amount, nonce'}; auth.sig; key),
            TransferSignedMode::Key => @verify_key({key, nonce'}; auth.sig; key),
            TransferSignedMode::KeyTo => @verify_key({key, to, nonce'}; auth.sig; key),
            TransferSignedMode::KeyAmount => @verify_key({key, amount, nonce'}; auth.sig; key),
        },
        TransferAuthMode::Predicate(addr) => @check_if_predicate_owns(addr; key),
    };
    constraint match auth.extra {
        ExtraConstraints::Extra(extra) => __predicate_at(extra.path) == extra.addr,
        ExtraConstraints::None => true,
    };
}

union CancelAuth = Signed(Secp256k1Signature) | Predicate(PredicateAddress);

predicate Cancel {
    // The account that is cancelling a transfer or burn.
    pub var key: b256;
    
    // The authorization for the cancel.
    var auth: CancelAuth;
    
    state nonce = mut storage::nonce[key];

    // Increment the nonce so that any pending transfers or 
    // burns are invalidated.
    constraint @safe_increment(nonce);

    // Check the authorization.
    constraint match auth {
        CancelAuth::Signed(sig) => @verify_key({key, nonce'}; sig; key),
        CancelAuth::Predicate(addr) => @check_if_predicate_owns(addr; key),
    };
}
